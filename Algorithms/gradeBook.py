from document import Document

class GradeBook(Document):
    '''
    A gradebook object that holds the student information and able to change course/Mark

    Attributes
    ----------
    course : str
        The course the student is takign
    mark : int
        Student's mark in the specific course
    studentInfo : class
        Uses the studentInfo class for the student's personal information
    teacher : str
        The Teachers Name administrating the document
    genDate : str
        Date when Document is being generated

    Methods
    -------
    signature() -> str
        The teacher's signature to be attatched to every document
    updatedMark(updated : str) -> str
        Takes the updated mark and sets the current mark to the updated one
    changeCourse(change : str) -> str
        Returns the course once its been changed
    __str__() -> str
        Returns the student's first name + last name
    __repr__() -> str
        Represents the GradeBook object with a value of __str__
    '''

    def __init__(self,studentInfo,course,mark,teacher,genDate):
        '''
        Constructor to build the gradebook object

        Parameters
        ----------
        studentInfo : class
            Uses the studentInfo class for the student's personal information
        course : str
            The course the student is taking
        mark : int
            Student's mark in the specific course
        teacher : str
            The Teachers Name administrating the document
        genDate : str
            Date when Document is being generated
        '''
        self.studentInfo = studentInfo
        self.course = course
        self.mark = mark
        super().__init__(teacher,genDate)

    def signature(self):
        '''
        Creates the signature for the document

        Returns
        -------
        str
            The final signature created
        '''
        return f"Generated By: {self.teacher} @ {self.genDate}"

    def updatedMark(self, updated):
        '''
        Updates the students mark if needed

        Parameters
        ----------
        updated : int
            The mark to to replace what the original value was

        Returns
        -------
        int
            The updated mark
        '''
        self.mark = updated
        return self.mark

    def changeCourse(self,change):
        '''
        Updates the students course if needed

        Parameters
        ----------
        change : str
            The course to replace the original one

        Returns
        -------
        str
            Returns the updated course
        '''
        self.course = change
        return self.course

    def __str__(self):
        '''
        Readable value of first name + last name

        Returns
        -------
        str
            Returns the first name and last name
        '''
        return f"{self.studentInfo.firstName} {self.studentInfo.lastName}"

    def __repr__(self):
        '''
        Representation for the object

        Returns
        -------
        str
            Value of what the representation for the object should be
        '''
        return self.__str__()